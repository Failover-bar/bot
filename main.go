package main

import (
	"context"
	"errors"
	"github.com/failoverbar/bot/model"
	"github.com/failoverbar/bot/wrap"
	ydbEnviron "github.com/ydb-platform/ydb-go-sdk-auth-environ"
	"log"
	"os"
	"time"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	tele "gopkg.in/telebot.v3"
)

func main() {
	ctx := context.Background()
	dsn, ok := os.LookupEnv("YDB_DSN")
	if !ok {
		log.Fatal("Set env YDB_DSN and any cred from ydb-go-sdk-auth-environ")
	}
	db, err := ydb.Open(ctx, dsn, ydbEnviron.WithEnvironCredentials(ctx))
	if err != nil {
		log.Fatal("can't connect to DB", err)
	}
	settings := tele.Settings{
		Token:  os.Getenv("TELEGRAM_TOKEN"),
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}
	b, err := tele.NewBot(settings)
	if err != nil {
		log.Fatal(err)
	}
	b.Use(Logger(), AutoResponder)

	h := handler{
		bot:                 b,
		userRepo:            &model.UserRepo{DB: db},
		profileRepo:         &model.ProfileRepo{DB: db},
		telegramProfileRepo: &model.TelegramProfileRepo{DB: db},
		subscriptionsRepo:   &model.SubscriptionRepo{DB: db},
	}

	b.Handle("/start", h.onStart)

	b.Handle(tele.OnText, h.onText)

	b.Handle(tele.OnContact, h.onContact)

	// –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	// –∫–∞–∫ –∑–æ–≤—É—Ç? –¢—ã –∏–∑ –∞–π—Ç–∏? –ö—Ç–æ —Ç—ã –≤ –∞–π—Ç–∏?
	// —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö?
	b.Start()
}

type handler struct {
	bot *tele.Bot

	userRepo            *model.UserRepo
	profileRepo         *model.ProfileRepo
	telegramProfileRepo *model.TelegramProfileRepo
	subscriptionsRepo   *model.SubscriptionRepo
}

func (h *handler) onContact(c tele.Context) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if c.Message().Contact.UserID != c.Sender().ID {
		return c.Send("–ü–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç. –ù–µ –∑–Ω–∞—é, —á—Ç–æ –º–Ω–µ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.")
	}
	userID := uint64(c.Sender().ID)
	profile, err := h.profileRepo.Get(ctx, userID)
	if err != nil {
		return err
	}
	profile.Phone = &c.Message().Contact.PhoneNumber
	if err := h.profileRepo.Upsert(ctx, profile); err != nil {
		return err
	}

	user, err := h.userRepo.Get(ctx, userID)
	if err != nil {
		return err
	}
	user.State = ""
	if err := h.userRepo.Upsert(ctx, user); err != nil {
		return err
	}

	m := h.bot.NewMarkup()
	m.Reply()
	m.RemoveKeyboard = true

	return c.Send("–ë–ª–∞–≥–æ–¥–∞—Ä—é. –ü–æ–∑–¥–Ω–µ–µ —è –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –∏–≤–µ–Ω—Ç—ã —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã.", m)
}

func (h *handler) onText(c tele.Context) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	userID := uint64(c.Message().Sender.ID)
	user, err := h.userRepo.Get(ctx, userID)
	if err != nil && !errors.Is(err, wrap.NotFoundError{}) {
		return err
	}
	if err != nil {
		log.Printf("got text from not-existent user %d: %s", c.Message().Sender.ID, c.Message().Text)
		return h.onStart(c)
	}

	switch user.State {
	case "":
		log.Printf("got text with empty context %d: %s", c.Message().Sender.ID, c.Message().Text)
		return c.Send("–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
	case "register.name":
		return h.onTextRegisterName(c, ctx, user, c.Message().Text)
	case "register.phone":
		return h.onTextRegisterPhone(c, c.Message().Text)
	default:
		log.Printf("got unknown context %s from %d: %s", user.Context, c.Message().Sender.ID, c.Message().Text)
		return c.Send("–ê –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫")
	}
}

func (h *handler) onTextRegisterName(c tele.Context, ctx context.Context, user *model.User, msg string) error {
	profile, err := h.profileRepo.Get(ctx, user.UserID)
	if err != nil {
		return err
	}
	profile.Name = &msg
	if err := h.profileRepo.Upsert(ctx, profile); err != nil {
		return err
	}

	user.State = "register.phone"
	if err := h.userRepo.Upsert(ctx, user); err != nil {
		return err
	}

	return h.onTextRegisterPhone(c, *profile.Name)
}

func (h *handler) onTextRegisterPhone(c tele.Context, msg string) error {
	m := h.bot.NewMarkup()
	m.RemoveKeyboard = true
	m.Reply(m.Row(m.Contact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä")))
	return c.Send("–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, "+msg+". –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ WiFi –∏ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –±–∞—Ä–∞ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"+
		"–û–±–µ—â–∞—é –Ω–∏–∫–æ–º—É –µ–≥–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å.", m)
}

func (h *handler) onStart(c tele.Context) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	userID := uint64(c.Message().Sender.ID)
	user, err := h.userRepo.Get(ctx, userID)
	if err != nil && !errors.Is(err, wrap.NotFoundError{}) {
		return err
	}
	if err == nil && user.State != "register" { // Reset state
		// TODO process payload
		user.State = ""
		if err := h.userRepo.Upsert(ctx, user); err != nil {
			return err
		}
		return c.Send("–ë–æ—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}
	user = &model.User{
		UserID: userID,
		State:  "register.name",
	}
	if err := h.userRepo.Insert(ctx, user); err != nil {
		return err
	}

	profile := &model.Profile{
		UserID: userID,
		Source: c.Message().Payload,
	}
	if err := h.profileRepo.Upsert(ctx, profile); err != nil {
		return err
	}

	tgProfile := &model.TelegramProfile{
		UserID:       userID,
		Username:     c.Sender().Username,
		FirstName:    c.Sender().FirstName,
		LastName:     c.Sender().LastName,
		LanguageCode: c.Sender().LanguageCode,
	}
	if err := h.telegramProfileRepo.Upsert(ctx, tgProfile); err != nil {
		return err
	}

	return c.Send("–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç *–±–æ—Ç –§–µ–π–ª–æ–≤–µ—Ä –ë–∞—Ä–∞*. ü§ó –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n*–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?*")
}
